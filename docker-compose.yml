services:
  db:
    image: postgres:16-alpine
    container_name: echoaway_db
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - echoaway_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U echoaway -d echoaway"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  backend:
    build: 
      context: .
      target: production
    container_name: echoaway_backend
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=${NODE_ENV}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_SSL=${DB_SSL}
      - FRONTEND_URL=${FRONTEND_URL}
      - PORT=${PORT}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - echoaway_network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/status', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  pg_data:
    driver: local

networks:
  echoaway_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
